// api/generate-image.js
import chromium from 'chrome-aws-lambda';
import puppeteer from 'puppeteer-core'; // still use puppeteer-core!

const isProduction = process.env.AWS_REGION !== undefined; // Vercel/Lambda environments usually define this

export default async function handler(req, res) {
  const { title = "Custom Title", subtitle = "Generated by HTML", width = 600, height = 800 } = req.query;

  const templateWidth = parseInt(width);
  const templateHeight = parseInt(height);

  let browser = null;

  try {
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <style>
          * { margin: 0; padding: 0; box-sizing: border-box; }
          body {
            width: ${templateWidth}px;
            height: ${templateHeight}px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            position: relative;
          }

          .title {
            font-size: 32px;
            color: white;
            font-weight: bold;
            margin-bottom: 10px;
          }

          .subtitle {
            font-size: 18px;
            color: rgba(255,255,255,0.85);
          }

          .decorative-circle {
            position: absolute;
            background: rgba(255, 255, 255, 0.08);
            border-radius: 50%;
          }
        </style>
      </head>
      <body>
        ${Array.from({length: 20}, () => {
          const x = Math.random() * templateWidth;
          const y = Math.random() * templateHeight;
          const radius = Math.random() * 30 + 10;
          return `<div class="decorative-circle" style="left: ${x}px; top: ${y}px; width: ${radius*2}px; height: ${radius*2}px;"></div>`;
        }).join('')}

        <div class="title">${title}</div>
        <div class="subtitle">${subtitle}</div>
      </body>
      </html>
    `;

    browser = await puppeteer.launch({
      args: chromium.args,
      defaultViewport: {
        width: templateWidth,
        height: templateHeight,
        deviceScaleFactor: 1,
      },
      executablePath: await chromium.executablePath,
      headless: chromium.headless,
    });

    const page = await browser.newPage();

    await page.setContent(htmlContent, {
      waitUntil: 'networkidle0',
      timeout: 30000,
    });

    const screenshot = await page.screenshot({
      type: 'png',
      clip: {
        x: 0,
        y: 0,
        width: templateWidth,
        height: templateHeight,
      },
    });

    res.setHeader('Content-Type', 'image/png');
    res.setHeader('Cache-Control', 'public, max-age=31536000');
    res.send(screenshot);

  } catch (error) {
    console.error('Puppeteer error:', error.message, error.stack);
    res.status(500).json({ error: error.message });
  } finally {
    if (browser !== null) {
      await browser.close();
    }
  }
}
